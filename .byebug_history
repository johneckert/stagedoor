continue
fees
key
fees[key]
continue
key
fees
continue
maybe_designer = Designer.new(designer_params)
params
continue
params
continue
designer_params
maybe_designer
exit
maybe_designer.ethnicity.split
maybe_designer.ethnicity.to_a.split
maybe_designer.ethnicity.to_a
maybe_designer.ethnicity
continue
maybe_designer
params
designer_params
exit
continue
%W(#{str})
%w(str)
%w str
str
methods
continue
str
continue
[] << str
%w(#{str})
str
%w(str)
%w(str_
str.to_a
str
params
@designer
str
continue
maybe_designer.ethnicity
maybe_designer.ethnicity.last
maybe_designer.ethnicity.last.chomp("\")
maybe_designer.ethnicity.last.chomp("\
maybe_designer.ethnicity
maybe_designer.ethnicities
Designer.create(designer_params)
maybe_designer
designer_params
continue
maybe_designer
maybe_designer.ethnicity = e
maybe_designer.ethnicities = e
e = params.require(:designer).permit(ethnicity: 
e = 
params.require(:designer).permit(ethnicity: [])
maybe_designer
designer_params
params
continue
params
maybe_designer
continue
exit
maybe_designer
continue
maybe_designer
continue
maybe_designer
continue
maybe_designer
continue
maybe_designer
continue
c.ethnicity
c =  Designer.new(designer_params)
 Designer.new(designer_params)
continue
 Designer.new(designer_params)
continue
Designer.new(designer_params)
designer_params
params
exit
contract = Contract.create(venue_id: [*1..159].sample, fee: [*1500..5000].sample, opening_date: random_date, musical: [true, false].sample, designer_id: [*1..100].sample, show_name: Faker::Book.title)
contract = Contract.create(venue_id: [*1..159].sample, fee: [*1500..5000], opening_date: random_date, musical: [true, false].sample, designer_id: [*1..100], show_name: Faker::Book.title)
continue
contract = Contract.create(venue_id: [*1..159].sample, fee: [*1500..5000], opening_date: random_date, musical: [true, false].sample, designer_id: [*1..100], show_name: Faker::Book.title)
exit
contract = Contract.create(venue_id: [1..159].sample, fee: [1500..5000], opening_date: random_date, musical: [true, false].sample, designer_id: [1..100], show_name: Faker::Book.title)
exit
random_date('%Y-%m-%d')
random_date(%Y-%m-%d)
random_date
Date.new
month
day
year
random_date.parse
random_date
exit
continue
end
  rand(days).days.ago(Date.today)
def rand_date(days)
end
  Date.jd(r)
  r = rand(high-low+1) + low
  low, high = from.ajd.to_i, to.ajd.to_i
def date_rand(from = Date.new(1970,1,1), to = Date.today)
require 'date'
end
  Date.jd(r)
  r = rand(high-low+1) + low
  low, high = from.ajd.to_i, to.ajd.to_i
def date_rand(from = Date.new(1970,1,1), to = Date.today)
require 'date'
rand(10).years.ago("%Y%m%d")
rand(10).years.ago ("%Y%m%d")
rand(10).years.ago (%Y%m%d)
rand(10).years.ago rand(10).years.ago
rand(10).years.ago(%Y%m%d)
rand(10).years.ago
exit
continue
random_date
continue
exit
designer
exit
birth_year2 = [*1945..1996]
birth_year.sample
designer
continue
params
continue
    maybe_designer = Designer.new(designer_params)
params
continue
params[:search]
params(:search)
params
continue
conintue
location_contracts
location_Ccontracts
exit
continue!
continue
year.to_s
year
stat_category[0]
stat_category.key
stat_category
fees.each
fees.keys
fees
stat_category
avg([10000, 5000])
avg
fees
end_year
start_year
stat_category
row
continue
params.require(:designer).permit(:ethnicity => [])
params.require(:designer).permit(:ethnicity)
params.require(:designer)
params
designer_params
continue
contiunue
continue
self
@location
@locaiton
continue
self
value
continue
@location
continue
<<<<<<< HEAD
@contract
continue
contract_params
=======
num_array
num_array)
continue
average
avg([1,2,3])
fees.values
fees
continue
fees[category][year]
fees[category][year] == nil
category
year
fees
fees.first
fees.keys
fees
>>>>>>> d64f3c6639a9286f6ed9d8be9353db036eea0a2d
exit
    params.require(:contract).permit(:venue_id, :show_name, :opening_date, :musical, :fee, :company_id, category_ids: [])
params.require(:contract).permit(:venue_id, :show_name, :opening_date, :musical, :fee, category_ids: [], :company_id)
params.require(:contract).permit(:category_ids[])
    params.require(:contract).permit(:venue_id, :show_name, :opening_date, :musical, :fee, :category_ids, :company_id)
params.require(:contract).permit(:category_ids)
params.require(:contract)
params
clear
params.require(:contract).permit(:categories)
params.require(:contract).permit(:category_ids)
params.require(:contract)
Params.require(:contract)
params
contract_params
continue
contract_params
continue
con.type
con
com
continue
@charts[venue.name]
@charts
      @charts[venue.name] = generate_chart(venue.contracts)
venue
vemie
continue
@chart
@chart = GoogleVisualr::Interactive::AreaChart.new(data_table, option)
data_table
continue
@sorted_contracts.each{|co| puts co.opening_date}
@sorted_contracts = v.contracts.sort_by{|contract| contract.opening_date}
v.contracts
v
continue
<<<<<<< HEAD
fee_hash.invert
fee_hash.inver
fee_hash.invert.last
fee.hash.invert.last
fee_hash
mode
=======
location_path(1)
